using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Navigation;
using Microsoft.Phone.Controls;
using Microsoft.Phone.Shell;

using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Input;

namespace BushidoApp
{
    public partial class CharacterPage : PhoneApplicationPage
    {
        int charIndex { get; set; }
        int factIndex { get; set; }

        System.Windows.Media.SolidColorBrush color { get; set; }
        public void CharacterPage()
        {
        }

        public void loadImage()
        {
            MiniImage.Source = FactionList.Factions()[factIndex].Characters[charIndex].MinisImage;
            int cnt = 1;
            foreach (BitmapImage img in FactionList.Factions()[factIndex].Characters[charIndex].ProfileImage)
            {
                switch(cnt)
                {
                    case 1: ProfileImageFirst_1.Source = img;
                            ProfileImageBack_1.Source = img;
                            break;
                    case 2: ProfileImageFirst_2.Source = img;
                            ProfileImageBack_2.Source = img;
                            break;
                    case 3: ProfileImageFirst_3.Source = img;
                            ProfileImageBack_3.Source = img;
                            break;
                    case 4: ProfileImageFirst_4.Source = img;
                            ProfileImageBack_4.Source = img;
                            break;
                    case 5: ProfileImageFirst_5.Source = img;
                            ProfileImageBack_5.Source = img;
                            break;
                }
                cnt += 1;
            }
            
            cnt *= 2;
            cnt -= 1;
            
            int max = Pivot.Items.Count;
            for (int i = cnt; i < max; i++)
            {
                    Pivot.Items.RemoveAt(Pivot.Items.Count-1);
            }
            if (FactionList.Factions()[factIndex].Characters[charIndex].MinisImage == null) 
            {
                Pivot.Items.RemoveAt(0);
            }
        }

        public CharacterPage()
        {
            InitializeComponent();
        }
        
        protected override void OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs e)
        {
            string charIndexStr, factIndexStr;
            if (NavigationContext.QueryString.TryGetValue("charIndex", out charIndexStr) && 
                NavigationContext.QueryString.TryGetValue("factIndex", out factIndexStr))
            {
                charIndex = int.Parse(charIndexStr);
                factIndex = int.Parse(factIndexStr);
                ChangeColor(FactionList.Factions()[factIndex].Name);
                loadImage();
            }
            base.OnNavigatedTo(e);
        }


        protected void ChangeColor(string factionName){
            ApplicationTitle.Foreground = Faction.GetColor(factionName);
            /*
            miniHeader.Foreground = Faction.GetColor(factionName);
            HeaderF1.Foreground = Faction.GetColor(factionName);
            HeaderF2.Foreground = Faction.GetColor(factionName);
            HeaderF3.Foreground = Faction.GetColor(factionName);
            HeaderF4.Foreground = Faction.GetColor(factionName);
            HeaderF5.Foreground = Faction.GetColor(factionName);
            HeaderB1.Foreground = Faction.GetColor(factionName);
            HeaderB2.Foreground = Faction.GetColor(factionName);
            HeaderB3.Foreground = Faction.GetColor(factionName);
            HeaderB4.Foreground = Faction.GetColor(factionName);
            HeaderB5.Foreground = Faction.GetColor(factionName);
            */
        }
        // these two fully define the zoom state:
        private double TotalImageScale = 1d;
        private Point ImagePosition = new Point(0, 0);

        private Point _oldFinger1;
        private Point _oldFinger2;
        private double _oldScaleFactor;

        private System.Windows.Controls.Image getImageToZoom()
        {
            switch(Pivot.SelectedIndex)
            {
                case 0: return MiniImage;
                case 1: return ProfileImageFirst_1;
                case 2: return ProfileImageBack_1;
                case 3: return ProfileImageFirst_2;
                case 4: return ProfileImageBack_2;
                case 5: return ProfileImageFirst_3;
                case 6: return ProfileImageBack_3;
                case 7: return ProfileImageFirst_4;
                case 8: return ProfileImageBack_4;
                case 9: return ProfileImageFirst_5;
                case 10: return ProfileImageBack_5;
            }
            return MiniImage;
        }

        private void OnPinchStarted(object s, PinchStartedGestureEventArgs e)
        {
            _oldFinger1 = e.GetPosition(getImageToZoom(), 0);
            _oldFinger2 = e.GetPosition(getImageToZoom(), 1);
            _oldScaleFactor = 1;
        }

        private void OnPinchDelta(object s, PinchGestureEventArgs e)
        {
            var scaleFactor = e.DistanceRatio / _oldScaleFactor;

            var currentFinger1 = e.GetPosition(getImageToZoom(), 0);
            var currentFinger2 = e.GetPosition(getImageToZoom(), 1);

            var translationDelta = GetTranslationDelta(
                currentFinger1,
                currentFinger2,
                _oldFinger1,
                _oldFinger2,
                ImagePosition,
                scaleFactor);

            _oldFinger1 = currentFinger1;
            _oldFinger2 = currentFinger2;
            _oldScaleFactor = e.DistanceRatio;

            UpdateImage(scaleFactor, translationDelta);
        }

        private void UpdateImage(double scaleFactor, Point delta)
        {
            TotalImageScale *= scaleFactor;
            ImagePosition = new Point(ImagePosition.X + delta.X, ImagePosition.Y + delta.Y);

            var transform = (CompositeTransform)getImageToZoom().RenderTransform;
            transform.ScaleX = TotalImageScale;
            transform.ScaleY = TotalImageScale;
            transform.TranslateX = ImagePosition.X;
            transform.TranslateY = ImagePosition.Y;
        }

        private Point GetTranslationDelta(
            Point currentFinger1, Point currentFinger2,
            Point oldFinger1, Point oldFinger2,
            Point currentPosition, double scaleFactor)
        {
            var newPos1 = new Point(
                currentFinger1.X + (currentPosition.X - oldFinger1.X) * scaleFactor,
                currentFinger1.Y + (currentPosition.Y - oldFinger1.Y) * scaleFactor);

            var newPos2 = new Point(
                currentFinger2.X + (currentPosition.X - oldFinger2.X) * scaleFactor,
                currentFinger2.Y + (currentPosition.Y - oldFinger2.Y) * scaleFactor);

            var newPos = new Point(
                (newPos1.X + newPos2.X) / 2,
                (newPos1.Y + newPos2.Y) / 2);

            return new Point(
                newPos.X - currentPosition.X,
                newPos.Y - currentPosition.Y);
        }

    }
}